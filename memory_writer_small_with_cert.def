/*
 * Copyright (c) 2018, Renesas Electronics Corporation
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 *   - Neither the name of Renesas nor the names of its contributors may be
 *     used to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

MEMORY {
	CERT (rwxa): ORIGIN = 0xE6300400, LENGTH = 0x00003C00
	RAM  (rwxa): ORIGIN = 0xE6304000, LENGTH = 0x00014000
	RAM2 (rwxa): ORIGIN = 0xE6318000, LENGTH = 0x00008000
}

SECTIONS
{
	.cert : {
		. = 0x00000000;
		KEEP(*(.boot_param))
		. = 0x0000008C;
		KEEP(*(.cert_offset))
		. = 0x000001D4;
		KEEP(*(.cert_addr))
		. = 0x000002E4;
		KEEP(*(.cert_size))
		. = 0x00000D54;
		KEEP(*(.cert_addr2))
		. = 0x00000E64;
		KEEP(*(.cert_size2))
	} > CERT

	.text : {
		*(.text*)
		*(.rodata*)
		. = NEXT(64);
		__RO_END__ = .;
	} > RAM

	.data : {
		__DATA_START__ = .;
		 *(.data)
		. = NEXT(64);
		__DATA_END__ = .;
	} > RAM

	__DATA_SIZE__ = SIZEOF(.data);

	.bss : {
		__BSS_START__ = .;
		 *(.bss)
		 *(COMMON)
		 . = NEXT(64);
		__BSS_END__ = .;
	} > RAM2

	stacks (NOLOAD) : ALIGN(64) {
		__STACKS_START__ = .;
		KEEP(*(writer_stack))
		__STACKS_END__ = .;
	} > RAM2

	__BSS_SIZE__ = SIZEOF(.bss);
}
